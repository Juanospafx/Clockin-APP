"""Add postal_code to clockins

Revision ID: 46055aa71464
Revises: 8124e8dd3eb7
Create Date: 2025-05-28 10:27:10.626977

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '46055aa71464'
down_revision: Union[str, None] = '8124e8dd3eb7'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('clockins')
    op.drop_table('detections')
    op.drop_table('project_history')
    op.drop_table('users')
    op.drop_table('projects')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('projects',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('location_lat', sa.NUMERIC(precision=9, scale=6), autoincrement=False, nullable=True),
    sa.Column('location_long', sa.NUMERIC(precision=9, scale=6), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('state', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('postal_code', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='projects_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=120), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('role', sa.VARCHAR(length=10), server_default=sa.text("'field'::character varying"), autoincrement=False, nullable=True),
    sa.Column('password', sa.VARCHAR(length=128), server_default=sa.text("'changeme'::character varying"), autoincrement=False, nullable=False),
    sa.Column('profile_photo', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('user_type', postgresql.ENUM('office', 'field', name='user_type_enum'), server_default=sa.text("'office'::user_type_enum"), autoincrement=False, nullable=False),
    sa.CheckConstraint("role::text = ANY (ARRAY['admin'::character varying, 'user'::character varying, 'field'::character varying, 'office'::character varying]::text[])", name='role_enum_check'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('project_history',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('clockin_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['clockin_id'], ['clockins.id'], name=op.f('project_history_clockin_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('project_history_project_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('project_history_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('project_history_pkey'))
    )
    op.create_table('detections',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('clockin_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('label', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['clockin_id'], ['clockins.id'], name=op.f('detections_clockin_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('detections_pkey'))
    )
    op.create_table('clockins',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('end_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'started'::character varying"), autoincrement=False, nullable=True),
    sa.Column('location_lat', sa.NUMERIC(precision=9, scale=6), autoincrement=False, nullable=True),
    sa.Column('location_long', sa.NUMERIC(precision=9, scale=6), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('photo_path', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('clockins_project_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('clockins_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('clockins_pkey'))
    )
    # ### end Alembic commands ###
