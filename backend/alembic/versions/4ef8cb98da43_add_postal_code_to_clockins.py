"""Add postal_code to clockins

Revision ID: 4ef8cb98da43
Revises: 46055aa71464
Create Date: 2025-05-28 10:31:34.772521

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '4ef8cb98da43'
down_revision: Union[str, None] = '46055aa71464'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('clockins', sa.Column('postal_code', sa.String(length=20), nullable=True))
    op.alter_column('clockins', 'user_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('clockins', 'start_time',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('clockins', 'end_time',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('clockins', 'location_lat',
               existing_type=sa.NUMERIC(precision=9, scale=6),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('clockins', 'location_long',
               existing_type=sa.NUMERIC(precision=9, scale=6),
               type_=sa.Float(),
               existing_nullable=True)
    op.drop_constraint(op.f('clockins_project_id_fkey'), 'clockins', type_='foreignkey')
    op.drop_constraint(op.f('clockins_user_id_fkey'), 'clockins', type_='foreignkey')
    op.create_foreign_key(None, 'clockins', 'projects', ['project_id'], ['id'])
    op.create_foreign_key(None, 'clockins', 'users', ['user_id'], ['id'])
    op.drop_column('clockins', 'photo_path')
    op.alter_column('detections', 'clockin_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_constraint(op.f('detections_clockin_id_fkey'), 'detections', type_='foreignkey')
    op.create_foreign_key(None, 'detections', 'clockins', ['clockin_id'], ['id'])
    op.alter_column('project_history', 'project_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('project_history', 'user_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('project_history', 'date',
               existing_type=sa.DATE(),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('project_history', 'clockin_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_constraint(op.f('project_history_project_id_fkey'), 'project_history', type_='foreignkey')
    op.drop_constraint(op.f('project_history_clockin_id_fkey'), 'project_history', type_='foreignkey')
    op.drop_constraint(op.f('project_history_user_id_fkey'), 'project_history', type_='foreignkey')
    op.create_foreign_key(None, 'project_history', 'projects', ['project_id'], ['id'])
    op.create_foreign_key(None, 'project_history', 'clockins', ['clockin_id'], ['id'])
    op.create_foreign_key(None, 'project_history', 'users', ['user_id'], ['id'])
    op.alter_column('projects', 'location_lat',
               existing_type=sa.NUMERIC(precision=9, scale=6),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('projects', 'location_long',
               existing_type=sa.NUMERIC(precision=9, scale=6),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('users', 'role',
               existing_type=sa.VARCHAR(length=10),
               type_=sa.Enum('admin', 'user', name='roleenum'),
               nullable=False,
               existing_server_default=sa.text("'field'::character varying"))
    op.alter_column('users', 'user_type',
               existing_type=postgresql.ENUM('office', 'field', name='user_type_enum'),
               type_=sa.Enum('office', 'field', name='usertypeenum'),
               existing_nullable=False,
               existing_server_default=sa.text("'office'::user_type_enum"))
    op.create_unique_constraint(None, 'users', ['email'])
    op.create_unique_constraint(None, 'users', ['username'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'users', type_='unique')
    op.drop_constraint(None, 'users', type_='unique')
    op.alter_column('users', 'user_type',
               existing_type=sa.Enum('office', 'field', name='usertypeenum'),
               type_=postgresql.ENUM('office', 'field', name='user_type_enum'),
               existing_nullable=False,
               existing_server_default=sa.text("'office'::user_type_enum"))
    op.alter_column('users', 'role',
               existing_type=sa.Enum('admin', 'user', name='roleenum'),
               type_=sa.VARCHAR(length=10),
               nullable=True,
               existing_server_default=sa.text("'field'::character varying"))
    op.alter_column('projects', 'location_long',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=9, scale=6),
               existing_nullable=True)
    op.alter_column('projects', 'location_lat',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=9, scale=6),
               existing_nullable=True)
    op.drop_constraint(None, 'project_history', type_='foreignkey')
    op.drop_constraint(None, 'project_history', type_='foreignkey')
    op.drop_constraint(None, 'project_history', type_='foreignkey')
    op.create_foreign_key(op.f('project_history_user_id_fkey'), 'project_history', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('project_history_clockin_id_fkey'), 'project_history', 'clockins', ['clockin_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('project_history_project_id_fkey'), 'project_history', 'projects', ['project_id'], ['id'], ondelete='CASCADE')
    op.alter_column('project_history', 'clockin_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('project_history', 'date',
               existing_type=sa.DateTime(),
               type_=sa.DATE(),
               existing_nullable=False)
    op.alter_column('project_history', 'user_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('project_history', 'project_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_constraint(None, 'detections', type_='foreignkey')
    op.create_foreign_key(op.f('detections_clockin_id_fkey'), 'detections', 'clockins', ['clockin_id'], ['id'], ondelete='CASCADE')
    op.alter_column('detections', 'clockin_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.add_column('clockins', sa.Column('photo_path', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'clockins', type_='foreignkey')
    op.drop_constraint(None, 'clockins', type_='foreignkey')
    op.create_foreign_key(op.f('clockins_user_id_fkey'), 'clockins', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('clockins_project_id_fkey'), 'clockins', 'projects', ['project_id'], ['id'], ondelete='CASCADE')
    op.alter_column('clockins', 'location_long',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=9, scale=6),
               existing_nullable=True)
    op.alter_column('clockins', 'location_lat',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=9, scale=6),
               existing_nullable=True)
    op.alter_column('clockins', 'end_time',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('clockins', 'start_time',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('clockins', 'user_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_column('clockins', 'postal_code')
    # ### end Alembic commands ###
